/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8/userguide/tutorial_java_projects.html
 */
plugins {
    //Fat Jar support
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    // Apply the java plugin to add support for Java and
    id 'java'
    id 'java-library'
    // id 'application'
    // The War plugin extends the Java plugin to add support for assembling web application WAR 
    // files. It disables the default JAR archive generation of the Java plugin 
    // and adds a default WAR archive task
    id 'war'
}
buildDir = "gradle_build_directory"
// mainClassName = "this.is.required.for.application"
// version = '0.3.0'
sourceCompatibility = 1.7
targetCompatibility = 1.7

compileJava   {
  sourceCompatibility = project.sourceCompatibility
  targetCompatibility = project.targetCompatibility
}

// Custom java project layout
sourceSets {
    main {
        java {
            srcDirs = ['src/us/kbase/']
        }
        resources {
            srcDirs = ['src/dist']
        }
    }
    test {
        java {
            srcDirs = ["src/us/kbase/narrativejobservice/test"]
        }
    }
}
// Create a fat jar with all dependencies
shadowJar {
   baseName = 'NJSWrapper'
}


//Attributes for War
war {
    //TODO FIX
    //from 'src/rootContent' // adds a file-set to the root of the archive
    //webInf { from 'src/additionalWebInf' } // adds a file-set to the WEB-INF dir.
    //classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
    //classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    webXml = file('war/web.xml') // copies a file to WEB-INF/web.xml
}

//Copy .jar file to ./dist/
task copyFatJarToDist(type: Copy) {
    from shadowJar
    into 'dist'
    // rename ("NJSWrapper-${version}", "NJSWrapper")
}
//Copy .jar file to ./dist/
task copyJarToDist(type: Copy) {
    from jar
    into 'dist'
    // rename ("NJSWrapper-${version}", "NJSWrapper")
}
//Copy .war file to ./dist/
task copyWarToDist(type: Copy) {
    from war
    into 'dist'
    // rename ("NJSWrapper-${version}", "NJSWrapper")
}
//Clean Build directory 
task cleanup(type: Delete) {
    delete buildDir,'dist','deployment/lib'
    println "Deleting dist and deployment/lib"
}
//Copy all files
task copyAllToDeployment(type: Copy) {
    from "dist"
    into "deployment/lib"
    println "Copying all files from dist to deployment/lib"
}

task deployJar(type: Copy){
    into file("deployment/lib/")
    from jar
    from war
    from shadowJar
    rename("NJSWrapper-${version}","NJSWrapper")
    println "Copying from dist/NJSWrapper-${version}.jar to deployment/lib/NJSWrapper.jar"
}

// task customTask{
// //    copy(from:jar, into file("deployment/lib/"))
// //    copy(from:war, into file("deployment/lib/"))
// //    copy(from:shadowJar, into file("deployment/lib/"))
//    copy(file:"$buildDir/libs/NJSWrapper-${version}.jar", tofile:"deployment/lib/NJSWrapper.jar")
// }

task buildJar(type: GradleBuild) {
     tasks = ['cleanup', 'jar', 'copyJarToDist']
}
task buildWar(type: GradleBuild) {
     tasks = ['cleanup', 'war', 'copyWarToDist']
}
//Create jar, war, and fat jar
task buildAll(type: GradleBuild) {
     tasks = ['cleanup', 'war','shadowJar','copyJarToDist','copyWarToDist','copyFatJarToDist','copyAllToDeployment']
}

//Create gradle wrapper scripts
task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}

//Swap out live
task hotSwap(type:Exec){
    commandLine "./dev_tools/simple_mini_kb_deploy.sh"
}

//Use KBase Artifactory
repositories {
    maven {
        url 'http://ci.kbase.us:8081/artifactory/gradle-dev'
    }
}

dependencies {
    api 'joda-time:joda-time:2.2'
    api 'ini4j:ini4j:0.5.2'
    api 'jetty:jetty-all:7.0.0'
    api 'jna:jna:3.4.0'
    api 'servlet:servlet-api:2.5'
    api 'syslog4j:syslog4j:0.9.46'
    api 'junit:junit:4.9'
    api 'kbase:auth:0.4.4'
    api 'jackson:jackson-annotations:2.2.3'
    api 'jackson:jackson-core:2.2.3'
    api 'jackson:jackson-databind:2.2.3'
    api 'kbase:kbase-common:0.0.23'
    api 'kbase:WorkspaceClient:0.6.0'
    api 'derby:derby:10.10.1.1'
    api 'easymock:easymock:3.2'
    api 'kbase:shock-client:0.0.15'
    api 'apache_commons:httpclient:4.3.1'
    api 'apache_commons:httpcore:4.3'
    api 'apache_commons:httpmime:4.3.1'
    api 'bouncycastle:bcprov-jdk15on:1.51'
    api 'dockerjava:docker-java:1.3.0'
    api 'jaxrs:javax.ws.rs-api:2.0'
    api 'jersey:jersey-client:2.11'
    api 'jersey:jersey-common:2.11'
    api 'hk2:hk2-api:2.3.0-b05'
    api 'slf4j:slf4j-api:1.7.7'
    api 'jersey:jersey-guava:2.11'
    api 'jersey:jersey-apache-connector:2.11'
    api 'hk2:javax.inject:2.3.0-b05'
    api 'jackson:jackson-jaxrs-json-provider:2.1.2'
    api 'hk2:aopalliance-repackaged:2.3.0-b05'
    api 'bouncycastle:bcpkix-jdk15on:1.51'
    api 'cglib:cglib-nodep:2.2'
    api 'apache_commons:commons-compress:1.5'
    api 'testinfected:core-matchers:1.6'
    api 'hamcrest:hamcrest-core:1.3'
    api 'hamcrest:hamcrest-library:1.3'
    api 'hk2:hk2-locator:2.3.0-b05'
    api 'hk2:hk2-utils:2.3.0-b05'
    api 'jackson:jackson-module-jaxb-annotations:2.1.2'
    api 'annotation:javax.annotation-api:1.2'
    api 'testinfected:jpa-matchers:1.6'
    api 'lambdaj:lambdaj:2.3.3'
    api 'logback:logback-classic:1.1.2'
    api 'logback:logback-core:1.1.2'
    api 'objenesis:objenesis:1.2'
    api 'hk2:osgi-resource-locator:1.0.1'
    api 'persistence:persistence-api:1.0'
    api 'gesellix:unix-socket-factory:2015-01-27T15-02-14'
    api 'apache_commons:commons-codec:1.8'
    api 'google:guava:18.0'
    api 'apache_commons:commons-io:2.4'
    api 'apache_commons:commons-logging:1.1.1'
    api 'apache_commons:commons-lang:2.4'
    api 'apache_commons:commons-lang3:3.1'
    api 'mongo:mongo-java-driver:2.13.3'
    api 'jongo:jongo:0.5-early-20130912-1506'
    api 'bson4jackson:bson4jackson:2.2.0-2.2.0'
}